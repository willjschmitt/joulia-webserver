"""Scrapes White Lab's site for their yeast specs.

Writes the data to brewery/migrations/yeast_ingredients_white_labs.tsv.
"""

import logging
import re

import urllib.request
import urllib.parse
from bs4 import BeautifulSoup


LOGGER = logging.getLogger(__name__)

WHITE_LABS_ROOT = r'http://www.wyeastlab.com'
WHITE_LABS_YEASTS_PAGE = r'https://www.whitelabs.com/yeast-bank?keywords=&flocculation=0&type=yeasts&temp_from=1&temp_to=100&atten_from=1&atten_to=100&tolerance=0&drink_type=0&yeast_type=0&op=SHOW+ALL+STRAINS&form_build_id=form-l39Ewbv-SV4w6oZ4JpCXHCM5S2hoNOFrnMHkoDDsFnc&form_id=whitelabs_yeast_yeast_bank_form'
WHITE_LABS_YEAST_FILE = 'brewery/migrations/yeast_ingredients_white_labs.tsv'


def get_white_labs_yeasts():
    req = urllib.request.Request(WHITE_LABS_YEASTS_PAGE,
                                 headers={'User-Agent': "Fake Browser"})
    yeasts_page = urllib.request.urlopen(req)
    yeasts_soup = BeautifulSoup(yeasts_page, 'html.parser')

    yeast_divs = yeasts_soup.find_all('div', class_='yeast-details yeast-core')
    with open(WHITE_LABS_YEAST_FILE, 'wb') as yeast_file:
        yeast_file.write('# Generated by scraping {}\n'
                         .format(WHITE_LABS_YEASTS_PAGE)
                         .encode('utf-8'))
        yeast_file.write('# name\tlow_attenuation\thigh_attenuation\t'
                         'low_temperature\thigh_temperature\tlow_abv\t'
                         'high_abv\n'
                         .encode('utf-8'))
        for i, yeast_div in enumerate(yeast_divs):
            if i % 10 == 0:
                LOGGER.info("Yeast parsing progress: %d/%d.", i,
                            len(yeast_divs))

            yeast_data = parse_white_labs_yeast(yeast_div)

            if re.match(r'WLP\d+.*', yeast_data[0]) is None:
                LOGGER.info("Skipping non WLP yeast %s.", yeast_data[0])
                continue

            yeast_line = '{}\n'.format('\t'.join(yeast_data))
            yeast_file.write(yeast_line.encode('utf-8'))


def parse_white_labs_yeast(yeast_div):
    """Gets the yeast information from White Labs yeast div.

    Args:
        yeast_div: element found by BeautifulSoup

    Returns:
        Tuple with (name, low_attenuation, high_attenuation, low_temperature,
            high_temperature, low_abv, high_abv). Attenuations and abv are in
            per-unit, temperatures are in degF.
    """
    name_elem = yeast_div.find('div', class_='yeast-desc').find('h2')
    name = name_elem.text

    attenuation_elem = yeast_div.find('div', class_='attribute attenuation') \
        .find('div', class_='value')
    attenuations = re.match(
        r'(?P<low_attenuation>\d+)% - (?P<high_attenuation>\d+)%',
        attenuation_elem.text)
    if attenuations is None:
        raise RuntimeError('Failed to get attenuations from {} in {}.'.format(
                                attenuation_elem.text, name))
    low_attenuation = attenuations.groupdict()['low_attenuation']
    high_attenuation = attenuations.groupdict()['high_attenuation']

    temperatures_elem = yeast_div.find('div', class_='attribute temperature') \
        .find('div', class_='value')
    temperatures = re.match(
        r'(?P<low_temperature>\d+)°F - (?P<high_temperature>\d+)°F',
        temperatures_elem.text)
    if temperatures is None:
        raise RuntimeError('Failed to get temperatures from {} in {}.'.format(
            temperatures_elem.text, name))
    low_temperature = temperatures.groupdict()['low_temperature']
    high_temperature = temperatures.groupdict()['high_temperature']

    tolerances_elem = yeast_div.find('div', class_='attribute tolerance') \
        .find('div', class_='value')
    tolerances = re.match(
        r'.*\((?P<low_abv>\d+) - (?P<high_abv>\d+)%\)',
        tolerances_elem.text)
    low_abv = "0"
    high_abv = "0"
    if tolerances is not None:
        low_abv = tolerances.groupdict()['low_abv']
        high_abv = tolerances.groupdict()['high_abv']
    else:
        LOGGER.warning('Could not determine abv tolerances in %s for %s. '
                       'Defaulting to 0.', tolerances_elem.text, name)

    yeast_info = (name, low_attenuation, high_attenuation, low_temperature,
                  high_temperature, low_abv, high_abv)
    LOGGER.debug("Got yeast information %s.", yeast_info)
    return yeast_info


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    get_white_labs_yeasts()
